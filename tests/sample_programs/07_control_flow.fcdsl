# Test 7: Complex control flow and decision logic
# Tests: complex conditions, nested expressions, operator precedence

Signal sensor_a = ("signal-A", 0);
Signal sensor_b = ("signal-B", 1);
Signal sensor_c = ("signal-C", 2);

# Complex conditional logic
Signal threshold_low = 10;
Signal threshold_high = 100;

Signal in_range = (sensor_a >= threshold_low) && (sensor_a <= threshold_high);
Signal any_active = (sensor_a > 0) || (sensor_b > 0) || (sensor_c > 0);
Signal all_active = (sensor_a > 0) && (sensor_b > 0) && (sensor_c > 0);

# Operator precedence test: | binds looser than +
Signal precedence_test = sensor_a + sensor_b * 2 | "iron-plate";

# Nested conditions with arithmetic
Signal priority_value = 
    (sensor_a > 50) * 100 +
    (sensor_b > 30) * 50 +
    (sensor_c > 10) * 25;

# State-based decisions
Memory decision_state = 0;
Signal state = read(decision_state);

Signal next_state = 
    (state == 0 && sensor_a > 0) * 1 +
    (state == 1 && sensor_b > 0) * 2 +
    (state == 2 && sensor_c > 0) * 0 +
    (state * (sensor_a == 0 && sensor_b == 0 && sensor_c == 0));

write(decision_state, next_state);

# Output based on state and sensors
Signal output_value = 
    (state == 0) * sensor_a +
    (state == 1) * sensor_b * 2 +
    (state == 2) * sensor_c * 3;
