# Test 13: Complex nested expressions and operator precedence
# Tests: deeply nested expressions, operator precedence, complex projections

Signal a = 100;
Signal b = 110;
Signal c = 120;

# Test operator precedence: * before +, && before ||
Signal precedence1 = a + b * c;         # Should be a + (b * c)  
Signal precedence2 = a > 0 && b > 0 || c > 0;  # Should be (a > 0 && b > 0) || c > 0

# Complex nested arithmetic with projections
Signal nested = ((a + b) * (c - 1)) / 2 | "iron-plate";

# Multiple projections and type coercion
Signal type_chain = a | "copper-plate";
Signal type_recast = type_chain | "steel-plate";

# Complex multi-signal operations replacing bundles
Signal combined_ab = (a + b) | "iron-plate";
Signal combined_ca = (c + a * 2) | "copper-plate";
Signal bundle_math = ((combined_ab + combined_ca) * 3) | "steel-plate";

# Deeply nested projections
Signal complex_projection = (((a + b) | "iron-plate") + ((b * c) | "copper-plate")) | "steel-plate";  # Sum via projection

# Complex logical expressions
Signal complex_logic = (a > b && b > c) || (c > a && a > 0) || (b == 0 && c > 5);

# Conditional arithmetic using boolean results as multipliers
Signal conditional_value = 
    (a > 10) * 100 +
    (b > 20) * 200 + 
    (c > 30) * 300;

# Mixed multi-channel operations without bundles
Signal mixed_result = (a + (b | "iron-plate") + (c | "iron-plate") + (a * 2)) | "iron-ore";
