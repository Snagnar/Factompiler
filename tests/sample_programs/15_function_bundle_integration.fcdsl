# Test 15: Function and bundle integration
# Tests: functions returning bundles, bundle parameters, complex function-bundle interactions

# Function that creates and returns bundles
func create_resource_bundle(iron_amount, copper_amount) {
    let processed_iron = iron_amount * 2;
    let processed_copper = copper_amount + 10;
    let resource_bundle = bundle(
        processed_iron | "iron-plate",
        processed_copper | "copper-plate"
    );
    return resource_bundle;
}

# Function that processes bundles
func process_bundle(input_bundle, multiplier) {
    let scaled_bundle = input_bundle * multiplier;
    let iron_component = scaled_bundle | "iron-plate";
    let copper_component = scaled_bundle | "copper-plate";
    let total = iron_component + copper_component;
    return total;
}

# Function with memory that affects bundle creation
func stateful_bundle_creator(base_value) {
    mem accumulator = memory(0);
    mem type_selector = memory(0);
    
    let current_accum = read(accumulator);
    let selector = read(type_selector);
    
    write(accumulator, current_accum + base_value);  
    write(type_selector, (selector + 1) % 3);
    
    let bundle_content = bundle(
        (selector == 0) * current_accum | "iron-plate",
        (selector == 1) * current_accum | "copper-plate", 
        (selector == 2) * current_accum | "coal"
    );
    
    return bundle_content;
}

# Test inputs
let iron_input = input("iron-plate", 0);
let copper_input = input("copper-plate", 1);
let control_input = input(2);

# Create bundles using functions
let basic_bundle = create_resource_bundle(iron_input, copper_input);
let processed_total = process_bundle(basic_bundle, 3);

# Stateful bundle creation
let stateful_bundle1 = stateful_bundle_creator(control_input);
let stateful_bundle2 = stateful_bundle_creator(control_input + 5);
let stateful_bundle3 = stateful_bundle_creator(control_input * 2);

# Process stateful bundles
let stateful_total1 = process_bundle(stateful_bundle1, 2);
let stateful_total2 = process_bundle(stateful_bundle2, 1);

# Combine function results with regular bundle operations
let manual_bundle = bundle(iron_input, copper_input);
let combined_bundle = basic_bundle + manual_bundle;
let final_total = process_bundle(combined_bundle, 1);

# Function calls with bundle projections as parameters
let iron_only = basic_bundle | "iron-plate";
let copper_only = basic_bundle | "copper-plate";
let specialized_bundle = create_resource_bundle(iron_only, copper_only);

# Complex nested function and bundle operations
let complex_result = process_bundle(
    create_resource_bundle(
        stateful_bundle1 | "iron-plate",
        stateful_bundle2 | "copper-plate"
    ),
    control_input % 5 + 1
);
