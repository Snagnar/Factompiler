# Comprehensive Entity Testing Sample
# Tests all available entity types from draftsman and their properties

# =============================================================================
# COMBINATORS - Core circuit elements
# =============================================================================

# Basic signal constants
Signal input_signal = ("signal-A", 0);
Signal counter_value = ("signal-B", 1);

# Constant combinator with multiple signals
Entity constants = place("constant-combinator", 0, 0);
# In a full implementation, we'd set the combinator's values here

# Arithmetic operations
Signal sum = input_signal + counter_value;
Signal product = input_signal * 2;
Signal quotient = counter_value / 3;

# Decider logic
Signal condition = input_signal > 10;
Signal gate_output = condition * counter_value;

# =============================================================================
# POWER INFRASTRUCTURE
# =============================================================================

# Electric poles - power network
Entity small_pole = place("small-electric-pole", 5, 0);
Entity medium_pole = place("medium-electric-pole", 15, 0);
Entity big_pole = place("big-electric-pole", 30, 0);
Entity substation = place("substation", 45, 0);

# =============================================================================
# LOGISTICS - Belts, inserters, containers
# =============================================================================

# Transport belts
Entity yellow_belt = place("transport-belt", 0, 5);
Entity fast_belt = place("fast-transport-belt", 1, 5);
Entity express_belt = place("express-transport-belt", 2, 5);

# Underground belts
Entity underground_in = place("underground-belt", 0, 7);
Entity underground_out = place("underground-belt", 8, 7);

# Splitters
Entity basic_splitter = place("splitter", 0, 9);
Entity fast_splitter = place("fast-splitter", 3, 9);
Entity express_splitter = place("express-splitter", 6, 9);

# Inserters
Entity burner_inserter = place("burner-inserter", 10, 5);
Entity basic_inserter = place("inserter", 11, 5);
Entity long_inserter = place("long-handed-inserter", 12, 5);
Entity fast_inserter = place("fast-inserter", 13, 5);
Entity bulk_inserter = place("bulk-inserter", 14, 5);
Entity stack_inserter = place("stack-inserter", 15, 5);

# Containers  
Entity wooden_chest = place("wooden-chest", 10, 7);
Entity iron_chest = place("iron-chest", 11, 7);
Entity steel_chest = place("steel-chest", 12, 7);
Entity storage_tank = place("storage-tank", 14, 7);

# =============================================================================
# PRODUCTION - Assemblers, furnaces, mining
# =============================================================================

# Assembling machines
Entity assembler1 = place("assembling-machine-1", 0, 15);
Entity assembler2 = place("assembling-machine-2", 4, 15);
Entity assembler3 = place("assembling-machine-3", 8, 15);

# Furnaces
Entity stone_furnace = place("stone-furnace", 0, 20);
Entity steel_furnace = place("steel-furnace", 3, 20);
Entity electric_furnace = place("electric-furnace", 6, 20);

# Mining
Entity burner_drill = place("burner-mining-drill", 15, 15);
Entity electric_drill = place("electric-mining-drill", 18, 15);

# =============================================================================
# FLUIDS - Pumps and fluid handling
# =============================================================================

Entity offshore_pump = place("offshore-pump", 0, 25);
Entity pump = place("pump", 5, 25);

# =============================================================================
# CIRCUIT NETWORK CONTROL
# =============================================================================

# Lamp with circuit control
Entity controlled_lamp = place("small-lamp", 20, 0);
controlled_lamp.enable = input_signal > 5;

# Train stop with circuit control
Entity train_station = place("train-stop", 25, 0);
train_station.read_from_train = 1;
train_station.send_to_train = 1;

# =============================================================================
# ADVANCED - Radar, roboport
# =============================================================================

Entity radar = place("radar", 30, 15);
Entity roboport = place("roboport", 35, 15);

# =============================================================================
# CIRCUIT NETWORK INTERACTIONS
# =============================================================================

# Read entity properties into signals
Signal lamp_status = controlled_lamp.enable;
Signal train_contents = train_station.train_contents;

# Memory for state tracking
Memory entity_counter = 0;
write(entity_counter, read(entity_counter) + 1);
Signal counter_out = read(entity_counter);

# Complex control logic
Signal enable_production = (input_signal > 100) && (counter_out < 1000);
assembler1.enable = enable_production;
assembler2.enable = enable_production;

# Conditional entity behavior
Signal belt_enable = input_signal % 10 > 5;
yellow_belt.enable = belt_enable;
fast_belt.enable = !belt_enable;

# Bundle operations with entity control
Bundle production_signals = bundle(
    input_signal,
    counter_out,
    enable_production | "production-enable"
);

Signal production_sum = production_signals | "signal-P";