# Comprehensive Signal Type Testing
# Tests all different types of signals available in Factorio/draftsman

# =============================================================================
# VIRTUAL SIGNALS - Built-in circuit network signals
# =============================================================================

# Basic virtual signals
Signal signal_A = ("signal-A", 0);
Signal signal_B = ("signal-B", 1);
Signal signal_0 = ("signal-0", 2);
Signal signal_1 = ("signal-1", 3);

# Special virtual signals
Signal everything = ("signal-everything", 4);
Signal anything = ("signal-anything", 5);
Signal each = ("signal-each", 6);

# Virtual signal arithmetic
Signal virtual_sum = signal_A + signal_B;
Signal virtual_product = signal_0 * signal_1;

# =============================================================================
# ITEM SIGNALS - All items that can be carried/stored
# =============================================================================

# Basic resources
Signal iron_ore = ("iron-ore", 10);
Signal copper_ore = ("copper-ore", 11);
Signal coal = ("coal", 12);
Signal stone = ("stone", 13);
Signal wood = ("wood", 14);

# Processed materials
Signal iron_plate = ("iron-plate", 15);
Signal copper_plate = ("copper-plate", 16);
Signal steel_plate = ("steel-plate", 17);
Signal iron_gear = ("iron-gear-wheel", 18);
Signal copper_cable = ("copper-cable", 19);

# Advanced materials
Signal electronic_circuit = ("electronic-circuit", 20);
Signal advanced_circuit = ("advanced-circuit", 21);
Signal processing_unit = ("processing-unit", 22);
Signal plastic_bar = ("plastic-bar", 23);

# Intermediate products
Signal engine_unit = ("engine-unit", 25);
Signal electric_engine = ("electric-engine-unit", 26);
Signal flying_robot_frame = ("flying-robot-frame", 27);

# Science packs
Signal automation_science = ("automation-science-pack", 30);
Signal logistic_science = ("logistic-science-pack", 31);
Signal military_science = ("military-science-pack", 32);
Signal chemical_science = ("chemical-science-pack", 33);
Signal production_science = ("production-science-pack", 34);
Signal utility_science = ("utility-science-pack", 35);

# Weapons and ammo
Signal pistol = ("pistol", 40);
Signal submachine_gun = ("submachine-gun", 41);
Signal firearm_magazine = ("firearm-magazine", 42);
Signal piercing_rounds = ("piercing-rounds-magazine", 43);

# Tools
Signal burner_mining_drill_item = ("burner-mining-drill", 45);
Signal electric_mining_drill_item = ("electric-mining-drill", 46);
Signal transport_belt_item = ("transport-belt", 47);

# =============================================================================
# FLUID SIGNALS - All fluids in the game
# =============================================================================

# Basic fluids  
Signal water = ("water", 50);
Signal steam = ("steam", 51);
Signal crude_oil = ("crude-oil", 52);

# Refined oils
Signal petroleum_gas = ("petroleum-gas", 55);
Signal light_oil = ("light-oil", 56);
Signal heavy_oil = ("heavy-oil", 57);
Signal lubricant = ("lubricant", 58);

# Chemical fluids
Signal sulfuric_acid = ("sulfuric-acid", 60);

# Space Age fluids (if available)
Signal thruster_fuel = ("thruster-fuel", 65);
Signal thruster_oxidizer = ("thruster-oxidizer", 66);

# =============================================================================
# RECIPE SIGNALS - All crafting recipes
# =============================================================================

# Basic crafting recipes
Signal iron_plate_recipe = ("iron-plate", 70);  # Recipe names match item names
Signal copper_plate_recipe = ("copper-plate", 71);
Signal steel_plate_recipe = ("steel-plate", 72);

# Complex recipe signals  
Signal electronic_circuit_recipe = ("electronic-circuit", 75);
Signal advanced_circuit_recipe = ("advanced-circuit", 76);
Signal engine_unit_recipe = ("engine-unit", 77);

# =============================================================================
# ENTITY SIGNALS - All placeable entities
# =============================================================================

# Entity reference signals (used for reading entity IDs, etc.)
Signal belt_entity = ("transport-belt", 80);
Signal inserter_entity = ("inserter", 81); 
Signal chest_entity = ("iron-chest", 82);
Signal assembler_entity = ("assembling-machine-1", 83);

# =============================================================================
# SIGNAL OPERATIONS AND CONVERSIONS
# =============================================================================

# Mixed signal type operations
Signal resource_total = iron_ore + copper_ore + coal;
Signal processed_total = iron_plate + copper_plate + steel_plate;
Signal fluid_total = water + crude_oil + petroleum_gas;

# Signal type conversions via projection
Signal iron_as_virtual = iron_plate | "signal-I";
Signal copper_as_virtual = copper_plate | "signal-C";

# Mixed signal type aggregation (instead of bundle)
Signal mixed_aggregate = (
    (signal_A | "signal-M") +
    (iron_plate | "signal-M") +
    (water | "signal-M") +
    (iron_plate_recipe | "signal-M") +
    (belt_entity | "signal-M")
);

# Project aggregate to different signal types  
Signal mixed_virtual = mixed_aggregate | "signal-M";
Signal mixed_item = mixed_aggregate | "iron-gear-wheel";

# =============================================================================
# CONDITIONAL LOGIC WITH DIFFERENT SIGNAL TYPES
# =============================================================================

# Item-based conditions
Signal low_iron = iron_plate < 100;
Signal low_copper = copper_plate < 100;
Signal material_shortage = low_iron || low_copper;

# Fluid-based conditions
Signal water_available = water > 1000;
Signal oil_processing_ready = crude_oil > 500;

# Recipe-based logic
Signal can_craft_circuits = (iron_plate >= 1) && (copper_cable >= 3);
Signal can_craft_engines = (steel_plate >= 1) && (iron_gear >= 5);

# Virtual signal logic
Signal production_mode = signal_A > signal_B;
Signal emergency_stop = signal_0 == 0;

# =============================================================================
# MEMORY WITH DIFFERENT SIGNAL TYPES
# =============================================================================

# Item counters
Memory iron_consumed;
Memory copper_consumed;

write(0, iron_consumed, when=once);
write(0, copper_consumed, when=once);

Signal iron_increment = iron_plate > 0 && 1 || 0;
write(read(iron_consumed) + iron_increment, iron_consumed, when=1);
Signal copper_increment = copper_plate > 0 && 1 || 0;
write(read(copper_consumed) + copper_increment, copper_consumed, when=1);

# Fluid tracking
Memory water_used;

write(0, water_used, when=once);
Signal water_amount = water > 0 && water || 0;
write(read(water_used) + water_amount, water_used, when=1);

# Virtual signal state
Memory system_mode;

write(1, system_mode, when=once);
Signal mode_change = signal_A > 1000;
Signal new_mode = mode_change && 2 || read(system_mode);
write(new_mode, system_mode, when=1);

# =============================================================================
# OUTPUT AGGREGATE WITH ALL SIGNAL TYPES
# =============================================================================

Signal output_virtual = signal_A | "signal-Z";
Signal output_item = iron_plate | "iron-plate";
Signal output_fluid = water | "water-level";
Signal output_recipe = iron_plate_recipe | "recipe-active";
Signal output_entity = belt_entity | "entity-count";
Signal comprehensive_output = output_virtual + output_item + output_fluid + output_recipe + output_entity;

# Final status signals
Signal status_value = material_shortage && 0 || 1;
Signal overall_status = status_value | "system-ready";
Signal production_efficiency = ((processed_total * 100) / resource_total) | "efficiency-percent";